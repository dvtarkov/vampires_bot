# sync_rituals.py
import os
import asyncio
import logging
from typing import Sequence, Dict, Any

import gspread
from dotenv import load_dotenv
from google.oauth2.service_account import Credentials

from sqlalchemy import select
from sqlalchemy.orm import joinedload

# ========= –í–ê–®–ò –ò–ú–ü–û–†–¢–´ –ë–î (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç–∏) =========
from db.session import get_session
from db.models import Action, User  # –ø—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ User —É Action -> owner / user
from db.models import ActionStatus  # Enum —Å–æ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ PENDING, DONE
# ====================================================

# –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
from aiogram import Bot


load_dotenv()
log = logging.getLogger("sync_rituals")
logging.basicConfig(level=logging.INFO)

SCOPES = ["https://www.googleapis.com/auth/spreadsheets", "https://www.googleapis.com/auth/drive"]

# ====== bot (–∫–∞–∫ –≤ game_cycle.py) ======
try:
    from app import bot  # type: ignore
except Exception:
    bot = None
    log.warning("–ë–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–µ –±—É–¥—É—Ç.")

# –û–∂–∏–¥–∞–µ–º —Ç–∞–∫–∞—è —à–∞–ø–∫–∞ –ª–∏—Å—Ç–∞ (–ø–æ—Ä—è–¥–æ–∫ –Ω–µ –≤–∞–∂–µ–Ω, –∏—â–µ–º –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—è–º –∫–æ–ª–æ–Ω–æ–∫):
# title | user | text | created_at | RESOLVED | action_id
EXPECTED_COLUMNS: Sequence[str] = ("title", "user", "text", "created_at", "RESOLVED", "action_id")

SHEET_ID = os.environ["SPREADSHEET_ID"]
CREDS_PATH = os.environ["GOOGLE_APPLICATION_CREDENTIALS"]
RITUALS_SHEET_TITLE = os.getenv("RITUALS_SHEET_TITLE", "rituals")


def _truthy(v: str) -> bool:
    if v is None:
        return False
    s = str(v).strip().lower()
    return s in {"true", "1", "yes", "y", "–¥–∞", "ok"}


def _index_headers(ws) -> Dict[str, int]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç map {'title': 0, 'user': 1, ...} –ø–æ —Ä–µ–∞–ª—å–Ω—ã–º –∏–Ω–¥–µ–∫—Å–∞–º –∫–æ–ª–æ–Ω–æ–∫ (0-based).
    –ë—Ä–æ—Å–∏—Ç ValueError, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω—É–∂–Ω–∞—è –∫–æ–ª–æ–Ω–∫–∞.
    """
    header = ws.row_values(1)
    name_to_idx: Dict[str, int] = {}
    for i, name in enumerate(header):
        key = name.strip()
        if key in EXPECTED_COLUMNS:
            name_to_idx[key] = i
    missing = [c for c in EXPECTED_COLUMNS if c not in name_to_idx]
    if missing:
        raise ValueError(f"–í –ª–∏—Å—Ç–µ '{RITUALS_SHEET_TITLE}' –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–ª–æ–Ω–∫–∏: {missing}. –ù–∞–π–¥–µ–Ω—ã: {header}")
    return name_to_idx


async def _notify_user(bot: Bot, tg_id: int, action: Action) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∏—Ç—É–∞–ª–∞.
    """
    title = getattr(action, "title", "") or "–†–∏—Ç—É–∞–ª"
    txt = getattr(action, "text", "") or ""
    msg = (
        f"‚ú® –í–∞—à —Ä–∏—Ç—É–∞–ª –∑–∞–≤–µ—Ä—à—ë–Ω!\n\n"
        f"–†–∏—Ç—É–∞–ª –≤ <{action.district.name}> –Ω–∞ {action.candles} üïØ"
        f"{txt[:1000]}"  # –æ–≥—Ä–∞–Ω–∏—á–∏–º, —á—Ç–æ–±—ã –Ω–µ —É–ª–µ—Ç–µ—Ç—å –≤ –ª–∏–º–∏—Ç—ã
    )
    try:
        await bot.send_message(tg_id, msg, parse_mode="HTML")
    except Exception as e:
        log.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ tg_id=%s: %s", tg_id, e)


async def main() -> int:
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Sheets
    creds = Credentials.from_service_account_file(CREDS_PATH, scopes=SCOPES)
    gc = gspread.authorize(creds)

    sh = gc.open_by_key(SHEET_ID)
    ws = sh.worksheet(RITUALS_SHEET_TITLE)

    headers_idx = _index_headers(ws)
    # –°—á–∏—Ç–∞–µ–º –í–°–ï –∑–Ω–∞—á–µ–Ω–∏—è (–≤ —Ç.—á. –ø—É—Å—Ç—ã–µ) –∏ –ø—Ä–æ–π–¥—ë–º –ø–æ —Å—Ç—Ä–æ–∫–∞–º, –Ω–∞—á–∏–Ω–∞—è —Å–æ 2-–π
    values = ws.get_all_values()
    if len(values) <= 1:
        log.info("–õ–∏—Å—Ç –ø—É—Å—Ç (–Ω–µ—Ç —Å—Ç—Ä–æ–∫ –∫—Ä–æ–º–µ —à–∞–ø–∫–∏).")
        return 0

    updated = 0
    skipped = 0
    not_found = 0
    not_pending = 0
    no_tg = 0
    no_id = 0

    async with get_session() as session:
        # –ß—Ç–æ–±—ã –Ω–µ –¥–µ–ª–∞—Ç—å –ø–æ –æ–¥–Ω–æ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∞ –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É ‚Äî —Å–æ–±–µ—Ä—ë–º action_id
        resolved_rows = []
        action_ids = []
        for r in values[1:]:
            try:
                resolved_flag = r[headers_idx["RESOLVED"]]
            except Exception:
                continue
            if not _truthy(resolved_flag):
                skipped += 1
                continue

            raw_id = r[headers_idx["action_id"]].strip() if len(r) > headers_idx["action_id"] else ""
            if not raw_id:
                no_id += 1
                continue
            try:
                aid = int(raw_id)
            except ValueError:
                no_id += 1
                continue

            resolved_rows.append(r)
            action_ids.append(aid)

        if not action_ids:
            log.info("–ù–µ—Ç RESOLVED —Ä–∏—Ç—É–∞–ª–æ–≤ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ.")
            return 0

        # –ó–∞–±–∏—Ä–∞–µ–º –¥–µ–π—Å—Ç–≤–∏—è –ø–∞—á–∫–æ–π
        q = await session.execute(
            select(Action)
            .options(joinedload(Action.owner))  # –ø–æ–¥–≥—Ä—É–∑–∏–º –≤–ª–∞–¥–µ–ª—å—Ü–∞ (User)
            .where(Action.id.in_(action_ids))
        )
        actions_by_id: Dict[int, Action] = {a.id: a for a in q.scalars().all()}

        # –û–±—Ä–∞–±–æ—Ç–∫–∞
        for r in resolved_rows:
            aid = int(r[headers_idx["action_id"]])
            action = actions_by_id.get(aid)
            if not action:
                not_found += 1
                continue

            if action.status != ActionStatus.PENDING:
                not_pending += 1
                continue

            action.status = ActionStatus.DONE  # PENDING -> DONE
            updated += 1

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            usr = getattr(action, "owner", None) or getattr(action, "user", None)
            tg_id = getattr(usr, "tg_id", None) if usr else None
            if tg_id and bot:
                await _notify_user(bot, tg_id, action)
            elif not tg_id:
                no_tg += 1

        await session.commit()

    log.info("–ì–æ—Ç–æ–≤–æ. –û–±–Ω–æ–≤–ª–µ–Ω–æ: %s, –ø—Ä–æ–ø—É—â–µ–Ω–æ (–Ω–µ RESOLVED): %s, –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: %s, –Ω–µ PENDING: %s, –±–µ–∑ tg_id: %s, –±–µ–∑ action_id: %s",
             updated, skipped, not_found, not_pending, no_tg, no_id)

    # –í—ã–≤–µ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –≤ stdout, —á—Ç–æ–±—ã –ø–æ–ø–∞–ª–æ –≤ /admin –ª–æ–≥–∏
    print(f"UPDATED={updated} SKIPPED={skipped} NOT_FOUND={not_found} NOT_PENDING={not_pending} NO_TG={no_tg} NO_ID={no_id}")
    return 0


if __name__ == "__main__":
    raise SystemExit(asyncio.run(main()))
