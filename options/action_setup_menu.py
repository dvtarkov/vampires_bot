# options/action_setup.py
import logging
from typing import Optional, List

from aiogram import types
from aiogram.fsm.context import FSMContext
from sqlalchemy import select
from sqlalchemy.orm import selectinload


from .registry import option
from db.session import get_session
from db.models import Action, ActionType, User, ActionStatus, District
from screens.settings_action import SettingsActionScreen


# --- NOTIFY HELPERS -----------------------------------------------------------
from services.notify import notify_user  # <- –∫–∞–∫ –º—ã –¥–µ–ª–∞–ª–∏ —Ä–∞–Ω–µ–µ

def _fmt_resources(action: Action) -> str:
    parts = []
    if (action.force or 0) > 0:       parts.append(f"üí™ —Å–∏–ª–∞: {action.force}")
    if (action.money or 0) > 0:       parts.append(f"üí∞ –¥–µ–Ω—å–≥–∏: {action.money}")
    if (action.influence or 0) > 0:   parts.append(f"ü™ô –≤–ª–∏—è–Ω–∏–µ: {action.influence}")
    if (action.information or 0) > 0: parts.append(f"üß† –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {action.information}")
    if getattr(action, "on_point", False):
        parts.append("üìç –Ω–∞ —Ç–æ—á–∫–µ")
    return ", ".join(parts) if parts else "—Ä–µ—Å—É—Ä—Å—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã"

async def _iter_district_watchers(session, district_id: int, exclude_user_id: int):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–±–ª—é–¥–∞—é—Ç (scout) –∑–∞ —Ä–∞–π–æ–Ω–æ–º,
    –∏—Å–∫–ª—é—á–∞—è –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞.
    """
    district = await session.get(District, district_id)
    if not district:
        return []
    # –ø–æ–¥–≥—Ä—É–∑–∏–º —Å–≤—è–∑—å
    await session.refresh(district, attribute_names=["scouting_by"])
    return [u for u in (district.scouting_by or []) if u.id != exclude_user_id]


async def _notify_watchers_action_started(session, bot, actor: User, action: Action):
    """
    –®–ª—ë–º –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—è–º —Ä–∞–π–æ–Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –Ω–∞—á–∞–ª–æ—Å—å –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ —Ä–∞–π–æ–Ω–µ.
    –¢–æ–ª—å–∫–æ –¥–ª—è defend/attack —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ä–∞–π–æ–Ω–æ–º –∏ —Å—Ç–∞—Ç—É—Å–æ–º PENDING.
    """

    if not action.district_id:
        return
    if (action.kind or "").lower() not in ("defend", "attack"):
        return
    if action.status != ActionStatus.PENDING:
        return

    watchers = await _iter_district_watchers(session, action.district_id, exclude_user_id=actor.id)

    if not watchers:
        return

    total = (
                    (action.money or 0)
                    + (action.influence or 0)
                    + (action.information or 0)
                    + (action.force or 0)
            ) * 5
    estimate = round(total, -1)

    who = actor.in_game_name or actor.username or f"#{actor.tg_id}"
    title = "üîî –î–µ–π—Å—Ç–≤–∏–µ –Ω–∞ —Ä–∞–π–æ–Ω–µ"

    extra = "\n–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –∞—Ç–∞–∫—É–µ—Ç —Ä–∞–π–æ–Ω –ª–∏—á–Ω–æ." if getattr(action, "on_point", False) else ""

    body = (
        f"{who} –Ω–∞—á–∞–ª(–∞) ¬´{(action.kind or '').capitalize()}¬ª"
        f"{f' ‚Äî {action.title}' if action.title else ''}.\n"
        f"–û—Ü–µ–Ω–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤: –æ–∫–æ–ª–æ {estimate}{extra}"
    )
    for w in watchers:
        await notify_user(bot, w.tg_id, title=title, body=body)

async def _notify_watchers_action_cancelled(session, bot, actor: User, action: Action, reason: str = "–æ—Ç–º–µ–Ω–µ–Ω–æ"):
    """
    –®–ª—ë–º –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—è–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, —á—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ/–≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ –≤ —á–µ—Ä–Ω–æ–≤–∏–∫/—É–¥–∞–ª–µ–Ω–æ.
    –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –±—ã–ª–æ —Å–≤—è–∑–∞–Ω–æ —Å —Ä–∞–π–æ–Ω–æ–º –∏ —ç—Ç–æ defend/attack.
    """
    if not action.district_id:
        return
    if (action.kind or "").lower() not in ("defend", "attack"):
        return

    watchers = await _iter_district_watchers(session, action.district_id, exclude_user_id=actor.id)
    if not watchers:
        return

    who = actor.in_game_name or actor.username or f"#{actor.tg_id}"
    title = "üîî –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ"
    body = (
        f"{who} {reason} –¥–µ–π—Å—Ç–≤–∏–µ ¬´{(action.kind or '').capitalize()}¬ª"
        f"{f' ‚Äî {action.title}' if action.title else ''}."
    )
    for w in watchers:
        await notify_user(bot, w.tg_id, title=title, body=body)
# -------------------------------------------------------------------------------


async def _rerender(cb: types.CallbackQuery, state: FSMContext, action_id: int):
    # –ø—É—Å—Ç—å —ç–∫—Ä–∞–Ω —Å–∞–º –¥–æ—Å—Ç–∞–Ω–µ—Ç action –ø–æ id, —á—Ç–æ–±—ã –Ω–µ —Ç–∞—Å–∫–∞—Ç—å ¬´–∂–∏–≤–æ–π¬ª ORM-–æ–±—ä–µ–∫—Ç –º–µ–∂–¥—É —Å–µ—Å—Å–∏—è–º–∏
    await SettingsActionScreen().run(
        message=cb.message, actor=cb.from_user, state=state,
        action_id=action_id
    )


@option("action_setup_menu_collective")
async def action_setup_menu_collective(cb: types.CallbackQuery, state: FSMContext, action_id: int, **_):
    async with get_session() as session:
        user = (await session.execute(select(User).where(User.tg_id == cb.from_user.id))).scalars().first()
        action = (await session.execute(select(Action).where(Action.id == action_id))).scalars().first()

        if not user or not action:
            await cb.answer("–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∑–∞—è–≤–∫–∞/–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.", show_alert=True)
            return

        if action.type == ActionType.COLLECTIVE:
            await cb.answer("–ó–∞—è–≤–∫–∞ —É–∂–µ –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–∞—è.")
            return

        action.type = ActionType.COLLECTIVE
        await session.commit()

    await _rerender(cb, state, action_id)
    await cb.answer("–¢–∏–ø –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω—ã–π ‚úÖ")


@option("action_setup_menu_individual")
async def action_setup_menu_individual(cb: types.CallbackQuery, state: FSMContext, action_id: int, **_):
    async with get_session() as session:
        user = (await session.execute(select(User).where(User.tg_id == cb.from_user.id))).scalars().first()
        action = (await session.execute(select(Action).where(Action.id == action_id))).scalars().first()

        if not user or not action:
            await cb.answer("–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∑–∞—è–≤–∫–∞/–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.", show_alert=True)
            return

        if action.type == ActionType.INDIVIDUAL:
            await cb.answer("–ó–∞—è–≤–∫–∞ —É–∂–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è.")
            return

        action.type = ActionType.INDIVIDUAL
        await session.commit()

    await _rerender(cb, state, action_id)
    await cb.answer("–¢–∏–ø –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π ‚úÖ")


_RESOURCE_FIELDS = {"force", "money", "influence", "information"}
_STEP = 1


async def _bump_resource(cb: types.CallbackQuery, state: FSMContext, action_id: int, field: str, delta: int):
    if field not in _RESOURCE_FIELDS:
        await cb.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ—Å—É—Ä—Å.", show_alert=True)
        return

    async with get_session() as session:
        user = (await session.execute(select(User).where(User.tg_id == cb.from_user.id))).scalars().first()
        action = (await session.execute(select(Action).where(Action.id == action_id))).scalars().first()
        if not user or not action:
            await cb.answer("–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∑–∞—è–≤–∫–∞/–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.", show_alert=True)
            return

        current = getattr(action, field, 0) or 0
        cap = getattr(user, field, 0) or 0

        new_val = current + delta
        if new_val < 0:
            new_val = 0
        if new_val > cap:
            new_val = cap

        if new_val == current:
            if delta > 0 and current >= cap:
                await cb.answer("–ë–æ–ª—å—à–µ –≤–ª–æ–∂–∏—Ç—å –Ω–µ–ª—å–∑—è ‚Äî –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤.")
            elif delta < 0 and current <= 0:
                await cb.answer("–ò —Ç–∞–∫ —É–∂–µ 0.")
            else:
                await cb.answer("–ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.")
            return

        setattr(action, field, new_val)
        await session.commit()

    await _rerender(cb, state, action_id)
    sign = "‚ûï" if delta > 0 else "‚ûñ"
    await cb.answer(f"{sign} {field}: {current} ‚Üí {new_val}")


@option("action_setup_menu_money_add")
async def action_setup_menu_money_add(cb: types.CallbackQuery, state: FSMContext, action_id: int, **_):
    await _bump_resource(cb, state, action_id, "money", +_STEP)


@option("action_setup_menu_money_remove")
async def action_setup_menu_money_remove(cb: types.CallbackQuery, state: FSMContext, action_id: int, **_):
    await _bump_resource(cb, state, action_id, "money", -_STEP)


@option("action_setup_menu_influence_add")
async def action_setup_menu_influence_add(cb: types.CallbackQuery, state: FSMContext, action_id: int, **_):
    await _bump_resource(cb, state, action_id, "influence", +_STEP)


@option("action_setup_menu_influence_remove")
async def action_setup_menu_influence_remove(cb: types.CallbackQuery, state: FSMContext, action_id: int, **_):
    await _bump_resource(cb, state, action_id, "influence", -_STEP)


@option("action_setup_menu_information_add")
async def action_setup_menu_information_add(cb: types.CallbackQuery, state: FSMContext, action_id: int, **_):
    await _bump_resource(cb, state, action_id, "information", +_STEP)


@option("action_setup_menu_information_remove")
async def action_setup_menu_information_remove(cb: types.CallbackQuery, state: FSMContext, action_id: int, **_):
    await _bump_resource(cb, state, action_id, "information", -_STEP)


@option("action_setup_menu_force_add")
async def action_setup_menu_force_add(cb: types.CallbackQuery, state: FSMContext, action_id: int, **_):
    await _bump_resource(cb, state, action_id, "force", +_STEP)


@option("action_setup_menu_force_remove")
async def action_setup_menu_force_remove(cb: types.CallbackQuery, state: FSMContext, action_id: int, **_):
    await _bump_resource(cb, state, action_id, "force", -_STEP)


@option("action_setup_menu_back")
async def action_setup_menu_back(cb: types.CallbackQuery, state: FSMContext, **kwargs):
    from screens.actions import ActionsScreen
    from screens.actions_stats import ActionsStatsScreen
    is_list = kwargs.get("is_list")
    if is_list:
        await ActionsStatsScreen().run(message=cb.message, actor=cb.from_user, state=state)
        await cb.answer()
    else:
        await ActionsScreen().run(message=cb.message, actor=cb.from_user, state=state)
    await cb.answer()


@option("action_setup_menu_done")
async def action_setup_menu_done(cb: types.CallbackQuery, state, action_id: int, **_):
    try:
        async with get_session() as session:
            user = await User.get_by_tg_id(session, cb.from_user.id)
            if not user:
                await cb.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
                return

            action = (await session.execute(
                select(Action)
                .options(selectinload(Action.owner))
                .where(Action.id == action_id)
            )).scalars().first()

            if not action:
                await cb.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
                return
            if action.owner_id != user.id:
                await cb.answer("–≠—Ç–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –¥—Ä—É–≥–æ–º—É –∏–≥—Ä–æ–∫—É.", show_alert=True)
                return
            if action.status not in (ActionStatus.PENDING, ActionStatus.DRAFT):
                await cb.answer(f"–ù–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –≤ —Å—Ç–∞—Ç—É—Å–µ: {action.status.value}.", show_alert=True)
                return

            total_resources = (action.money or 0) + (action.influence or 0) + (action.information or 0) + (action.force or 0)
            if total_resources <= 0 and not getattr(action, "on_point", False):
                await cb.answer("–ó–∞—è–≤–∫–∞ –ø—É—Å—Ç–∞: –¥–æ–±–∞–≤—å—Ç–µ —Ä–µ—Å—É—Ä—Å—ã –∏–ª–∏ –≤–∫–ª—é—á–∏—Ç–µ —Ñ–ª–∞–≥ '–ï–¥–µ–º –Ω–∞ —Ç–æ—á–∫—É'.", show_alert=True)
                return

            if (user.available_actions or 0) <= 0:
                await cb.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–ª–æ—Ç–æ–≤ –¥–µ–π—Å—Ç–≤–∏–π.", show_alert=True)
                return

            need_money = action.money or 0
            need_infl  = action.influence or 0
            need_info  = action.information or 0
            need_force = action.force or 0

            lack = []
            if user.money < need_money:
                lack.append(f"üí∞ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç {need_money - user.money}")
            if user.influence < need_infl:
                lack.append(f"ü™ô –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç {need_infl - user.influence}")
            if user.information < need_info:
                lack.append(f"üß† –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç {need_info - user.information}")
            if user.force < need_force:
                lack.append(f"üí™ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç {need_force - user.force}")
            if lack:
                await cb.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Å—É—Ä—Å–æ–≤: " + ", ".join(lack), show_alert=True)
                return

            # —Å–ø–∏—Å–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤ –∏ —Å–ª–æ—Ç–∞
            user.money       -= need_money
            user.influence   -= need_infl
            user.information -= need_info
            user.force       -= need_force
            user.available_actions = max(0, (user.available_actions or 0) - 1)

            # –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ PENDING
            action.status = ActionStatus.PENDING

            # üîπ –µ—Å–ª–∏ —ç—Ç–æ —Ä–∞–∑–≤–µ–¥–∫–∞ —Ä–∞–π–æ–Ω–∞ ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞–π–æ–Ω –≤ —Å–ø–∏—Å–æ–∫ —Ä–∞–∑–≤–µ–¥–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if action.type == ActionType.SCOUT_DISTRICT and action.district_id:
                # –ø–æ–¥–≥—Ä—É–∑–∏–º —Ç–µ–∫—É—â–∏–µ —Å–≤—è–∑–∏, —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å
                await session.refresh(user, attribute_names=["scouts_districts"])
                already = any(d.id == action.district_id for d in (user.scouts_districts or []))
                if not already:
                    district = await session.get(District, action.district_id)
                    if district is not None:
                        user.scouts_districts.append(district)

            await session.commit()
            try:
                logging.info("notify watchers started")
                await _notify_watchers_action_started(session, cb.bot, user, action)
            except Exception:
                logging.exception("notify watchers (start) failed")
        await cb.answer("–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≤ –∫–æ–Ω—Ü–µ —Ü–∏–∫–ª–∞.", show_alert=False)

        await SettingsActionScreen().run(
            message=cb.message,
            actor=cb.from_user,
            state=state,
            action_id=action_id
        )

    except Exception as e:
        logging.exception("action_setup_menu_done failed")
        await cb.answer(f"–û—à–∏–±–∫–∞: {e}", show_alert=True)


def _cap_actions(user: User, inc: int = 1) -> None:
    """–í–µ—Ä–Ω—ë—Ç +inc —Å–ª–æ—Ç–æ–≤, –Ω–µ –ø—Ä–µ–≤—ã—à–∞—è max_available_actions (–µ—Å–ª–∏ –∑–∞–¥–∞–Ω)."""
    cur = (user.available_actions or 0) + inc
    mx = user.max_available_actions
    if mx is not None:
        cur = min(cur, mx)
    user.available_actions = max(0, cur)


@option("action_setup_menu_edit")
async def action_setup_menu_edit(cb: types.CallbackQuery, state: FSMContext, action_id: int, **_):
    """
    –ü–µ—Ä–µ–≤–æ–¥ –≤ DRAFT. –ï—Å–ª–∏ –±—ã–ª PENDING, –≤–µ—Ä–Ω—É—Ç—å —Ä–µ—Å—É—Ä—Å—ã –∏–≥—Ä–æ–∫—É –∏ —Å–ª–æ—Ç –¥–µ–π—Å—Ç–≤–∏—è.
    –†–µ—Å—É—Ä—Å—ã –≤ –∑–∞—è–≤–∫–µ –ù–ï –æ–±–Ω—É–ª—è–µ–º.
    """
    try:
        async with get_session() as session:
            user = await User.get_by_tg_id(session, cb.from_user.id)
            if not user:
                await cb.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
                return

            action = (await session.execute(
                select(Action)
                .options(selectinload(Action.owner))
                .where(Action.id == action_id)
            )).scalars().first()

            if not action:
                await cb.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
                return
            if action.owner_id != user.id:
                await cb.answer("–≠—Ç–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –¥—Ä—É–≥–æ–º—É –∏–≥—Ä–æ–∫—É.", show_alert=True)
                return
            if action.status == ActionStatus.DELETED:
                await cb.answer("–≠—Ç–∞ –∑–∞—è–≤–∫–∞ —É–∂–µ —É–¥–∞–ª–µ–Ω–∞.", show_alert=True)
                return
            if action.status == ActionStatus.DRAFT:
                await cb.answer("–ó–∞—è–≤–∫–∞ —É–∂–µ –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (DRAFT).", show_alert=False)
            else:
                was_pending = (action.status == ActionStatus.PENDING)
                # –ë—ã–ª PENDING (–∏–ª–∏ –∏–Ω–æ–π –∞–∫—Ç–∏–≤–Ω—ã–π —Å—Ç–∞—Ç—É—Å) ‚Äî –≤–µ—Ä–Ω—É—Ç—å —Ä–µ—Å—É—Ä—Å—ã –∏–≥—Ä–æ–∫—É –∏ —Å–ª–æ—Ç
                if was_pending:
                    user.money += (action.money or 0)
                    user.influence += (action.influence or 0)
                    user.information += (action.information or 0)
                    user.force += (action.force or 0)
                    _cap_actions(user, +1)

                # –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤ DRAFT. –†–µ—Å—É—Ä—Å—ã –≤ –∑–∞—è–≤–∫–µ –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å.
                action.status = ActionStatus.DRAFT
                await session.commit()

                # –µ—Å–ª–∏ –æ—Ç–º–µ–Ω—è–ª–∏ PENDING ‚Äî —É–≤–µ–¥–æ–º–∏–º –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π
                if was_pending and action.district_id and (action.kind or "").lower() in ("defend", "attack"):
                    try:
                        await _notify_watchers_action_cancelled(session, cb.bot, user, action,
                                                                reason="–≤–µ—Ä–Ω—É–ª(–∞) –≤ —á–µ—Ä–Ω–æ–≤–∏–∫")
                    except Exception:
                        logging.exception("notify watchers (cancel/edit) failed")
                await cb.answer("–ó–∞—è–≤–∫–∞ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ –≤ DRAFT. –†–µ—Å—É—Ä—Å—ã –∏ —Å–ª–æ—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã.", show_alert=False)

        await SettingsActionScreen().run(
            message=cb.message,
            actor=cb.from_user,
            state=state,
            action_id=action_id
        )

    except Exception as e:
        logging.exception("action_setup_menu_edit failed")
        await cb.answer(f"–û—à–∏–±–∫–∞: {e}", show_alert=True)


@option("action_setup_menu_delete")
async def action_setup_menu_delete(cb: types.CallbackQuery, state: FSMContext, action_id: int, **_):
    """
    –ü–æ–º–µ—Ç–∏—Ç—å –∑–∞—è–≤–∫—É –∫–∞–∫ DELETED.
    –ï—Å–ª–∏ –±—ã–ª PENDING ‚Äî –≤–µ—Ä–Ω—É—Ç—å —Ä–µ—Å—É—Ä—Å—ã –∏–≥—Ä–æ–∫—É –∏ —Å–ª–æ—Ç –¥–µ–π—Å—Ç–≤–∏—è.
    –†–µ—Å—É—Ä—Å—ã –≤ —Å–∞–º–æ–π –∑–∞—è–≤–∫–µ –ù–ï –æ–±–Ω—É–ª—è—é—Ç—Å—è.
    """
    try:
        async with get_session() as session:
            user = await User.get_by_tg_id(session, cb.from_user.id)
            if not user:
                await cb.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
                return

            action = (await session.execute(
                select(Action)
                .options(selectinload(Action.owner))
                .where(Action.id == action_id)
            )).scalars().first()

            if not action:
                await cb.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
                return
            if action.owner_id != user.id:
                await cb.answer("–≠—Ç–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –¥—Ä—É–≥–æ–º—É –∏–≥—Ä–æ–∫—É.", show_alert=True)
                return
            if action.status == ActionStatus.DELETED:
                await cb.answer("–ó–∞—è–≤–∫–∞ —É–∂–µ —É–¥–∞–ª–µ–Ω–∞.", show_alert=False)
            else:
                # –ï—Å–ª–∏ –±—ã–ª–∞ PENDING ‚Äî —Ä–µ—Ñ–∞–Ω–¥ —Ä–µ—Å—É—Ä—Å–æ–≤ –∏ —Å–ª–æ—Ç–∞
                was_pending = (action.status == ActionStatus.PENDING)

                if was_pending:
                    user.money += (action.money or 0)
                    user.influence += (action.influence or 0)
                    user.information += (action.information or 0)
                    user.force += (action.force or 0)
                    _cap_actions(user, +1)

                # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ DELETED (—Ä–µ—Å—É—Ä—Å—ã –≤ –∑–∞—è–≤–∫–µ –æ—Å—Ç–∞—é—Ç—Å—è –∫–∞–∫ –µ—Å—Ç—å)
                action.status = ActionStatus.DELETED
                await session.commit()

                if was_pending and action.district_id and (action.kind or "").lower() in ("defend", "attack"):
                    try:
                        await _notify_watchers_action_cancelled(session, cb.bot, user, action, reason="—É–¥–∞–ª–∏–ª(–∞)")
                    except Exception:
                        logging.exception("notify watchers (cancel/delete) failed")

                await cb.answer("–ó–∞—è–≤–∫–∞ —É–¥–∞–ª–µ–Ω–∞. –†–µ—Å—É—Ä—Å—ã –∏ —Å–ª–æ—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã (–µ—Å–ª–∏ –±—ã–ª–∏ —Å–ø–∏—Å–∞–Ω—ã).", show_alert=False)

        # –ú–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∞—Ç—å —ç–∫—Ä–∞–Ω.
        await SettingsActionScreen().run(
            message=cb.message,
            actor=cb.from_user,
            state=state,
            action_id=action_id
        )

    except Exception as e:
        logging.exception("action_setup_menu_delete failed")
        await cb.answer(f"–û—à–∏–±–∫–∞: {e}", show_alert=True)


# –≤—Å–ø–æ–º–æ–≥–∞–ª–∫–∞: –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∞ —Å–ø–∏—Å–∫–∞ —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π –∏ –≤–æ–∑–º–æ–∂–Ω—ã–º–∏ —Å—Ç–∞—Ç—É—Å-—Ñ–∏–ª—å—Ç—Ä–∞–º–∏
async def _rerender_list_nav(cb: types.CallbackQuery, state: FSMContext, move: str):
    statuses: Optional[List[str]] = None
    if state:
        try:
            data = await state.get_data()
            statuses = data.get("actions_list_statuses")  # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –µ—Å–ª–∏ –≥–¥–µ-—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—à—å —Ñ–∏–ª—å—Ç—Ä—ã
        except Exception:
            statuses = None

    await SettingsActionScreen().run(
        message=cb.message,
        actor=cb.from_user,
        state=state,
        is_list=True,
        move=move,
        statuses=statuses,
    )


@option("action_setup_menu_prev")
async def action_setup_menu_prev(cb: types.CallbackQuery, state: FSMContext, **_):
    try:
        await _rerender_list_nav(cb, state, move="prev")
        await cb.answer()
    except Exception as e:
        logging.exception("action_setup_menu_prev failed")
        await cb.answer(f"–û—à–∏–±–∫–∞: {e}", show_alert=True)


@option("action_setup_menu_next")
async def action_setup_menu_next(cb: types.CallbackQuery, state: FSMContext, **_):
    try:
        await _rerender_list_nav(cb, state, move="next")
        await cb.answer()
    except Exception as e:
        logging.exception("action_setup_menu_next failed")
        await cb.answer(f"–û—à–∏–±–∫–∞: {e}", show_alert=True)


@option("action_setup_menu_moving_on_point")
async def action_setup_menu_moving_on_point(cb: types.CallbackQuery, state: FSMContext, action_id: int, **_):
    """
    –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Ñ–ª–∞–≥ on_point —É Action(id=action_id).
    –ù–∏—á–µ–≥–æ –Ω–µ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –∏ –Ω–µ –º–µ–Ω—è–µ—Ç –≤ UI.
    """
    try:
        async with get_session() as session:
            user = (await session.execute(
                select(User).where(User.tg_id == cb.from_user.id)
            )).scalars().first()
            action = (await session.execute(
                select(Action).where(Action.id == action_id)
            )).scalars().first()

            if not user or not action:
                await cb.answer("–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∑–∞—è–≤–∫–∞/–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.", show_alert=True)
                return
            if action.owner_id != user.id:
                await cb.answer("–≠—Ç–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –¥—Ä—É–≥–æ–º—É –∏–≥—Ä–æ–∫—É.", show_alert=True)
                return
            if action.status in (ActionStatus.DONE, ActionStatus.FAILED, ActionStatus.DELETED):
                await cb.answer("–î–µ–π—Å—Ç–≤–∏–µ —É–∂–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–∑–º–µ–Ω–µ–Ω–æ.", show_alert=True)
                return

            new_value = not bool(action.on_point)
            action.on_point = new_value
            await session.commit()

        await cb.answer("–ú–∞—Ä–∫–µ—Ä ¬´on point¬ª –≤–∫–ª—é—á—ë–Ω ‚úÖ" if new_value else "–ú–∞—Ä–∫–µ—Ä ¬´on point¬ª –≤—ã–∫–ª—é—á–µ–Ω ‚õî")

    except Exception:
        logging.exception("action_setup_menu_moving_on_point failed")
        await cb.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–ª–∞–≥–∞.", show_alert=True)
